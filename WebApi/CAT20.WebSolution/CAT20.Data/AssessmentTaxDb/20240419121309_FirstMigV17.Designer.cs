// <auto-generated />
using System;
using CAT20.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CAT20.Data.AssessmentTaxDb
{
    [DbContext(typeof(AssessmentTaxDbContext))]
    [Migration("20240419121309_FirstMigV17")]
    partial class FirstMigV17
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_sinhala_ci")
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Allocation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_allocation_id");

                    b.Property<decimal?>("AllocationAmount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_allocation_amount");

                    b.Property<string>("AllocationDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_allocation_description");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_allocation_assmt_id");

                    b.Property<DateOnly?>("ChangedDate")
                        .HasColumnType("date")
                        .HasColumnName("assmt_allocation_changed_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_allocation_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_allocation_created_by");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_allocation_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_allocation_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_allocation_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("assmt_allocations", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AllocationLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_alg_id");

                    b.Property<int?>("AllocationId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_alg_allocation_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_allocation_amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_alg_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_alg_created_by");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_alg_description");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("assmt_alg_from_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_alg_status");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("assmt_alg_to_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_alg_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_alg_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AllocationId");

                    b.ToTable("assmt_allocation_logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Assessment", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_id");

                    b.Property<bool>("AllocationChangeRequest")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_has_allocation_change_request");

                    b.Property<string>("AssessmentNo")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("assmt_no");

                    b.Property<int?>("AssessmentStatus")
                        .HasColumnType("int")
                        .HasColumnName("assmt_status");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_comment");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_assmt_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_assmt_created_by");

                    b.Property<bool>("DeleteRequest")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_has_delete_request");

                    b.Property<bool>("DescriptionChangeRequest")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_has_description_change_request");

                    b.Property<int?>("DescriptionId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_description_id");

                    b.Property<bool>("HasAssetsChangeRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("assmt_has_assets_cng_request");

                    b.Property<bool>("HasJournalRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("assmt_has_journal_request");

                    b.Property<bool>("IsPartnerUpdated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_is_partner_updated");

                    b.Property<bool>("IsSubPartnerUpdated")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_is_sub_partner_updated");

                    b.Property<bool?>("IsWarrant")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_is_warrant");

                    b.Property<string>("Obsolete")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_obsolete");

                    b.Property<int?>("OfficeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_office_id");

                    b.Property<int?>("OrderNo")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_order");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_partner_id");

                    b.Property<string>("PropertyAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_property_address");

                    b.Property<bool>("PropertyTypeChangeRequest")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_has_property_type_change_request");

                    b.Property<int?>("PropertyTypeId")
                        .IsRequired()
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_property_type_id");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int?>("SabhaId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_sabha_id");

                    b.Property<int?>("StreetId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_street_id");

                    b.Property<int?>("SubPartnerId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_sub_partner_id");

                    b.Property<int?>("Syn")
                        .HasColumnType("int")
                        .HasColumnName("assmt_syn");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_assmt_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_assmt_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("StreetId");

                    b.HasIndex("AssessmentNo", "StreetId")
                        .IsUnique();

                    b.ToTable("assmt_assessments", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentAssetsChange", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_assets_cng_id");

                    b.Property<int?>("ActionBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_assets_cng_action_by");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_assets_cng_action_date");

                    b.Property<string>("ActionNote")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_action_note");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_assets_cng_assessment_id");

                    b.Property<string>("ChangingProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_change_properties");

                    b.Property<int?>("DraftApproveReject")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_assets_cng_draft_approve_reject");

                    b.Property<string>("NewAddressLine1")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_new_address_1");

                    b.Property<string>("NewAddressLine2")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_new_address_2");

                    b.Property<string>("NewName")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_new_name");

                    b.Property<string>("NewNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_new_asmt_number");

                    b.Property<string>("OldAddressLine1")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_old_address_1");

                    b.Property<string>("OldAddressLine2")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_old_address_2");

                    b.Property<string>("OldName")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_old_name");

                    b.Property<string>("OldNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_old_asmt_number");

                    b.Property<int?>("RequestBy")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_assets_cng_request_by");

                    b.Property<DateTime?>("RequestDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_assets_cng_request_date");

                    b.Property<string>("RequestNote")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_assets_cng_request_note");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_assets_change", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentAuditLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_atl_id");

                    b.Property<int>("Action")
                        .HasColumnType("int")
                        .HasColumnName("assmt_atl_action");

                    b.Property<int?>("ActionBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_action_by");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_atl_assmt_id");

                    b.Property<int>("EntityType")
                        .HasColumnType("int")
                        .HasColumnName("assmt_entity_type");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_atl_time_stamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assmt_audit_logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalance", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_id");

                    b.Property<decimal?>("AnnualAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_annual_amount");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_assmt_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_by_excess_deduction");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_bal_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_created_by");

                    b.Property<int?>("CurrentQuarter")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_current_quarter");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_discount");

                    b.Property<decimal?>("DiscountRate")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_discount_rate");

                    b.Property<decimal?>("ExcessPayment")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_excess_payment");

                    b.Property<bool?>("HasTransaction")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_bal_has_transaction");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_bal_is_completed");

                    b.Property<decimal?>("LYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_ly_arrears");

                    b.Property<decimal?>("LYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_ly_warrant");

                    b.Property<int?>("NumberOfCancels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("assmt_bal_number_of_cancels");

                    b.Property<int?>("NumberOfPayments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("assmt_bal_number_of_payments");

                    b.Property<decimal?>("OverPayment")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_over_payment");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_paid");

                    b.Property<decimal?>("ReportBalance")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("assmt_bal_rpt_balance");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("assmt_bal_start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_status");

                    b.Property<decimal?>("TYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_ty_arrears");

                    b.Property<decimal?>("TYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_ty_warrant");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_bal_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_updated_by");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_year");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("assmt_balances", (string)null);
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH1", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh1_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_amount");

                    b.Property<int?>("BalanceHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh1_assmt_balance_hstry_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh1_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_qh1_is_completed");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh1_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh1_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh1_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh1_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceHistoryId")
                        .IsUnique();

                    b.ToTable("assmt_qh1", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH2", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh2_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_amount");

                    b.Property<int?>("BalanceHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh2_assmt_balance_hstry_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh2_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_qh2_is_completed");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh2_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh2_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh2_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh2_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceHistoryId")
                        .IsUnique();

                    b.ToTable("assmt_qh2", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH3", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh3_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_amount");

                    b.Property<int?>("BalanceHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh3_assmt_balance_hstry_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh3_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_qh3_is_completed");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh3_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh3_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh3_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh3_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceHistoryId")
                        .IsUnique();

                    b.ToTable("assmt_qh3", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH4", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh4_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_amount");

                    b.Property<int?>("BalanceHistoryId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh4_assmt_balance_hstry_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh4_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_qh4_is_completed");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_qh4_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh4_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qh4_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qh4_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceHistoryId")
                        .IsUnique();

                    b.ToTable("assmt_qh4", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_hstry_id");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_hstry_assmt_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_by_excess_deduction");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_bal_hstry_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_hstry_created_by");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_discount");

                    b.Property<decimal?>("DiscountRate")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_discount_rate");

                    b.Property<DateOnly?>("EndData")
                        .HasColumnType("date")
                        .HasColumnName("assmt_bal_hstry_end_date");

                    b.Property<decimal?>("ExcessPayment")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_excess_payment");

                    b.Property<bool?>("IsCompleted")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_bal_hstry_is_completed");

                    b.Property<decimal?>("LYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_ly_arrears");

                    b.Property<decimal?>("LYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_ly_warrant");

                    b.Property<int?>("NumberOfCancels")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("assmt_bal_histry_number_of_cancels");

                    b.Property<int?>("NumberOfPayments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("assmt_bal_histry_number_of_payments");

                    b.Property<decimal?>("OverPayment")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_over_payment");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("assmt_bal_hstry_start_date");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_hstry_status");

                    b.Property<decimal?>("TYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_ty_arrears");

                    b.Property<decimal?>("TYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_bal_hstry_ty_warrant");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_bal_hstry_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_hstry_updated_by");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("assmt_bal_hstry_year");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assmt_balance_history", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentDescriptionLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_id");

                    b.Property<int?>("ActionBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_action_by");

                    b.Property<string>("ActionNote")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("assmt_deslog_action_note");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_deslog_activate_date");

                    b.Property<int>("ActivationQuarter")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_act_quarter");

                    b.Property<int>("ActivationYear")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_act_year");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_assmt_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("assmt_deslog_cmt");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_deslog_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_created_by");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_des_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_deslog_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_deslog_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("DescriptionId");

                    b.ToTable("assmt_description_logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentDocument", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_doc_id");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_doc_assessment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("wb_doc_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_doc_created_by");

                    b.Property<string>("DocType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_doc_type");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_doc_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("wb_doc_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_doc_updated_by");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_doc_uri");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_documents", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentJournal", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_id");

                    b.Property<int?>("ActionBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_action_by");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_jnl_action_date");

                    b.Property<string>("ActionNote")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_jnl_action_note");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_assessment_id");

                    b.Property<int?>("DraftApproveReject")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_draft_approve_reject");

                    b.Property<decimal?>("NewAllocation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_new_allocation");

                    b.Property<decimal?>("NewExcessPayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_new_excess_payment");

                    b.Property<decimal?>("NewLYArrears")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_new_ly_arrears");

                    b.Property<decimal?>("NewLYWarrant")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_new_ly_warrant");

                    b.Property<int?>("NewPropertyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_new_prop_type");

                    b.Property<decimal?>("NewTYArrears")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_new_ty_arrears");

                    b.Property<decimal?>("NewTYWarrant")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_new_ty_warrant");

                    b.Property<decimal?>("OldAllocation")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_old_allocation");

                    b.Property<decimal?>("OldExcessPayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_old_excess_payment");

                    b.Property<decimal?>("OldLYArrears")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_old_ly_arrears");

                    b.Property<decimal?>("OldLYWarrant")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_old_ly_warrant");

                    b.Property<int?>("OldPropertyTypeId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_old_prop_type");

                    b.Property<decimal?>("OldTYArrears")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_old_ty_arrears");

                    b.Property<decimal?>("OldTYWarrant")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_jnl_old_ty_warrant");

                    b.Property<int?>("RequestBy")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_jnl_request_by");

                    b.Property<DateTime?>("RequestDate")
                        .IsRequired()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_jnl_request_date");

                    b.Property<string>("RequestNote")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_jnl_request_note");

                    b.Property<string>("changingProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_jnl_change_properties");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assessment_journals", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_process_id");

                    b.Property<int?>("ActionBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_process_action_by");

                    b.Property<string>("BackUpKey")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_process_backupkey");

                    b.Property<DateTime?>("ProceedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_proceed_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ProcessType")
                        .HasColumnType("int")
                        .HasColumnName("assmt_process_type");

                    b.Property<int>("ShabaId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_process_sbaha_id");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("assmt_process_year");

                    b.HasKey("Id");

                    b.HasIndex("Year", "ShabaId", "ProcessType")
                        .IsUnique();

                    b.ToTable("assmt_processes", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentPropertyType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_property_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_property_type_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_property_type_created_by");

                    b.Property<string>("PropertyTypeName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_property_type_name");

                    b.Property<int?>("PropertyTypeNo")
                        .IsRequired()
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_property_type_no");

                    b.Property<decimal?>("QuarterRate")
                        .IsRequired()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("assmt_property_type_quarter_rate");

                    b.Property<int?>("SabhaId")
                        .IsRequired()
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_property_type_sabha_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_property_type_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assm_property_type_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_property_type_updated_by");

                    b.Property<decimal?>("WarrantRate")
                        .IsRequired()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("assmt_property_type_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeNo", "SabhaId")
                        .IsUnique();

                    b.ToTable("assmt_property_types", (string)null);
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentPropertyTypeLog", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_id");

                    b.Property<int?>("ActionBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_action_by");

                    b.Property<string>("ActionNote")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("assmt_proptypeslog_action_note");

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_proptypeslog_activate_date");

                    b.Property<int>("ActivationQuarter")
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_act_quarter");

                    b.Property<int>("ActivationYear")
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_act_year");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_assmt_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("assmt_proptypeslog_cmt");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_proptypeslog_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_created_by");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_proptypeslog_des_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_proptypeslog_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_proptypeslog_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("assmt_property_types_logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentQuarterReport", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_qrt_id");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qrt_assmt_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_qrt_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qrt_created_by");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_tr_date_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("LYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_ly_arrears");

                    b.Property<decimal?>("LYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_ly_warrant");

                    b.Property<decimal?>("M1Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_m1_paid");

                    b.Property<decimal?>("M2Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_m2_paid");

                    b.Property<decimal?>("M3Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_m3_paid");

                    b.Property<decimal?>("QAmount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_q_amount");

                    b.Property<decimal?>("QWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_q_warrant");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qrt_quater_no");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("TYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_ty_arrears");

                    b.Property<decimal?>("TYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_qrt_ty_warrant");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_qrt_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qrt_updated_by");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("assmt_qrt_year");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assmt_quarter_report", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentRates", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_rates_id");

                    b.Property<decimal?>("AnnualDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_annual_discount");

                    b.Property<decimal?>("QuarterDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_quater_discount");

                    b.HasKey("Id");

                    b.ToTable("assmt_rates", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentTempPartner", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_ptnr_id");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_ptnr_assmt_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_tmp_ptnr_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_ptnr_created_by");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_ptnr_mobile_no");

                    b.Property<string>("NICNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_ptnr_nic");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_ptnr_name");

                    b.Property<string>("Street1")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_ptnr_street1");

                    b.Property<string>("Street2")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_ptnr_street2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_tmp_ptnr_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_ptnr_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("assm_temp_partners", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentTempSubPartner", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_sub_ptnr_id");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_sub_ptnr_assmt_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_tmp_sub_ptnr_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_sub_ptnr_created_by");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_sub_ptnr_mobile_no");

                    b.Property<string>("NICNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_sub_ptnr_nic");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_sub_ptnr_name");

                    b.Property<string>("Street1")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_sub_ptnr_street1");

                    b.Property<string>("Street2")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_tmp_ptnr_street2");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_tmp_sub_ptnr_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_tmp_sub_ptnr_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assm_temp_sub_partner", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentTransaction", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_tr_id");

                    b.Property<int?>("AssessmentId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_tr_assmt_id");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_tr_date_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("DiscountRate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("assmt_tr_rn_discount_rate");

                    b.Property<decimal?>("LYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_ly_arrears");

                    b.Property<decimal?>("LYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_ly_warrant");

                    b.Property<decimal?>("Q1")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_q1");

                    b.Property<decimal?>("Q2")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_q2");

                    b.Property<decimal?>("Q3")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_q3");

                    b.Property<decimal?>("Q4")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_q4");

                    b.Property<decimal?>("RunningDiscount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_rn_discount");

                    b.Property<decimal?>("RunningOverPay")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_rn_overpay");

                    b.Property<decimal?>("RunningTotal")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_rn_total");

                    b.Property<decimal?>("TYArrears")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_ty_arrears");

                    b.Property<decimal?>("TYWarrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_tr_ty_warrant");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("assmt_tr_type");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("assmt_transactions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentVoteAssign", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_vtasgn_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_created_by");

                    b.Property<int?>("PaymentTypeId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_votetype_id");

                    b.Property<int?>("SabhaId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_sabha_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_vtasgn_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_updated_by");

                    b.Property<int?>("VoteAssignmentDetailId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_vtasgn_vote");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("SabhaId", "PaymentTypeId")
                        .IsUnique();

                    b.ToTable("assmt_vote_assigns", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Description", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assm_des_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_des_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_des_created_by");

                    b.Property<int?>("DescriptionNo")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assm_des_no");

                    b.Property<string>("DescriptionText")
                        .HasColumnType("longtext")
                        .HasColumnName("assm_des_text");

                    b.Property<int?>("SabhaId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_des_sabha_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int(1)")
                        .HasColumnName("assm_des_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assm_des_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_des_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionNo", "SabhaId")
                        .IsUnique();

                    b.ToTable("assmt_descriptions", (string)null);
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.NewAllocationRequest", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_new_allocation_req_id");

                    b.Property<int>("ActivationQuarter")
                        .HasColumnType("int")
                        .HasColumnName("assmt_new_allocation_req_act_quarter");

                    b.Property<int>("ActivationYear")
                        .HasColumnType("int")
                        .HasColumnName("assmt_new_allocation_req_act_year");

                    b.Property<decimal?>("AllocationAmount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_new_allocation_req_amount");

                    b.Property<string>("AllocationDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("assmt_new_allocation_req_description");

                    b.Property<int?>("AssessmentId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_new_allocation_req_assmt_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_new_allocation_req_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_new_allocation_req_created_by");

                    b.Property<int?>("Status")
                        .HasColumnType("int(11)")
                        .HasColumnName("assmt_new_allocation_req_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_new_allocation_req_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_new_allocation_req_updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId")
                        .IsUnique();

                    b.ToTable("assmt_new_allocation_requests", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q1", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q1_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_amount");

                    b.Property<int?>("BalanceId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q1_assmt_balance_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q1_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q1_is_completed");

                    b.Property<bool>("IsOver")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q1_is_over");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q1_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q1_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q1_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q1_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId")
                        .IsUnique();

                    b.ToTable("assmt_q1", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q2", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q2_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_amount");

                    b.Property<int?>("BalanceId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q2_assmt_balance_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q2_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q2_is_completed");

                    b.Property<bool>("IsOver")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q2_is_over");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q2_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q2_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q2_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q2_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId")
                        .IsUnique();

                    b.ToTable("assmt_q2", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q3", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q3_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_amount");

                    b.Property<int?>("BalanceId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q3_assmt_balance_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q3_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q3_is_completed");

                    b.Property<bool>("IsOver")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q3_is_over");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q3_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q3_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q3_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q3_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId")
                        .IsUnique();

                    b.ToTable("assmt_q3", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q4", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q4_id");

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_amount");

                    b.Property<int?>("BalanceId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("assmt_q4_assmt_balance_id");

                    b.Property<decimal?>("ByExcessDeduction")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_by_excess_deduction");

                    b.Property<decimal?>("Discount")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_discount");

                    b.Property<decimal?>("DiscountRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_discount_rate");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q4_end_date");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q4_is_completed");

                    b.Property<bool>("IsOver")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("assmt_q4_is_over");

                    b.Property<decimal?>("Paid")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_paid");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("assmt_q4_start_date");

                    b.Property<decimal?>("Warrant")
                        .IsRequired()
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_warrant");

                    b.Property<int?>("WarrantBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q4_warrant_by");

                    b.Property<int?>("WarrantMethod")
                        .HasColumnType("int")
                        .HasColumnName("assmt_q4_warrant_method");

                    b.Property<decimal?>("WarrantRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("assmt_q4_warrant_rate");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId")
                        .IsUnique();

                    b.ToTable("assmt_q4", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Street", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_street_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_streett_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_street_created_by");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_street_status");

                    b.Property<string>("StreetCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("assmt_street_code");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("assmt_street_name");

                    b.Property<string>("StreetNo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("assmt_street_no");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assm_street_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_street_updated_by");

                    b.Property<int>("WardId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_street_ward_id");

                    b.HasKey("Id");

                    b.HasIndex("WardId");

                    b.HasIndex("StreetNo", "WardId")
                        .IsUnique();

                    b.ToTable("assmt_streets", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.VotePaymentType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_vt_pay_type_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assm_vt_pay_type_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assm_vt_pay_type_created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("assm_vt_pay_type_desc");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assm_vt_pay_type_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assm_vt_pay_type_cat_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assm_vt_pay_type_updated_by");

                    b.HasKey("Id");

                    b.ToTable("assmt_vote_payment_types", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Ward", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assmt_ward_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_ward_created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_ward_created_by");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_ward_office_id");

                    b.Property<int>("SabhaId")
                        .HasColumnType("int")
                        .HasColumnName("assmt_ward_sabha_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("assmt_ward_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("assmt_ward_updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnName("assmt_ward_updated_by");

                    b.Property<string>("WardCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("assmt_ward_code");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("assmt_ward_name");

                    b.Property<string>("WardNo")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("assmt_ward_no");

                    b.HasKey("Id");

                    b.HasIndex("WardNo", "SabhaId")
                        .IsUnique();

                    b.ToTable("assmt_wards", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Allocation", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithOne("Allocation")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.Allocation", "AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AllocationLog", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Allocation", "Allocation")
                        .WithMany("AllocationLogs")
                        .HasForeignKey("AllocationId")
                        .IsRequired()
                        .HasConstraintName("fk_assmt_alg_allocation_id");

                    b.Navigation("Allocation");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Assessment", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Description", "Description")
                        .WithMany("Assessments")
                        .HasForeignKey("DescriptionId")
                        .IsRequired()
                        .HasConstraintName("fk_assmt_description_id");

                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentPropertyType", "AssessmentPropertyType")
                        .WithMany("Assessments")
                        .HasForeignKey("PropertyTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_assmt_property_type");

                    b.HasOne("CAT20.Core.Models.AssessmentTax.Street", "Street")
                        .WithMany("Assessments")
                        .HasForeignKey("StreetId")
                        .IsRequired()
                        .HasConstraintName("fk_assmt_street_id");

                    b.Navigation("AssessmentPropertyType");

                    b.Navigation("Description");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentAssetsChange", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentAssetsChange")
                        .HasForeignKey("AssessmentId");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentAuditLog", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentAuditLogs")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_atl_assmt_id");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalance", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithOne("AssessmentBalance")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.AssessmentBalance", "AssessmentId");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH1", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", "AssessmentBalanceHistory")
                        .WithOne("QH1")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH1", "BalanceHistoryId");

                    b.Navigation("AssessmentBalanceHistory");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH2", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", "AssessmentBalanceHistory")
                        .WithOne("QH2")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH2", "BalanceHistoryId");

                    b.Navigation("AssessmentBalanceHistory");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH3", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", "AssessmentBalanceHistory")
                        .WithOne("QH3")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH3", "BalanceHistoryId");

                    b.Navigation("AssessmentBalanceHistory");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH4", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", "AssessmentBalanceHistory")
                        .WithOne("QH4")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.AssessmentBalanceHistory.AssessmentBalanceHistory.QH4", "BalanceHistoryId");

                    b.Navigation("AssessmentBalanceHistory");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentBalanceHistories")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("fk_assmt_bal_hstry_id");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentDescriptionLog", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentDescriptionLogs")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deslog_assmt_id");

                    b.HasOne("CAT20.Core.Models.AssessmentTax.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("Description");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentDocument", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentDocuments")
                        .HasForeignKey("AssessmentId");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentJournal", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentJournals")
                        .HasForeignKey("AssessmentId");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentPropertyTypeLog", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentPropertyTypeLogs")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_proptypes_log_assmt_id");

                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentPropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentQuarterReport", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentQuarterReport")
                        .HasForeignKey("AssessmentId")
                        .HasConstraintName("fk_assmt_q_rpt_id");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentTempPartner", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithOne("AssessmentTempPartner")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.AssessmentTempPartner", "AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentTempSubPartner", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("AssessmentTempSubPartner")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentTransaction", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithMany("Transactions")
                        .HasForeignKey("AssessmentId");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentVoteAssign", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.VotePaymentType", "VotePaymentType")
                        .WithMany("VoteAssigns")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assmt_vtasgn_vote_type");

                    b.Navigation("VotePaymentType");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.NewAllocationRequest", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Assessment", "Assessment")
                        .WithOne("NewAllocationRequest")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.NewAllocationRequest", "AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q1", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalance", "AssessmentBalance")
                        .WithOne("Q1")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.Quarter.Q1", "BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentBalance");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q2", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalance", "AssessmentBalance")
                        .WithOne("Q2")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.Quarter.Q2", "BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentBalance");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q3", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalance", "AssessmentBalance")
                        .WithOne("Q3")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.Quarter.Q3", "BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentBalance");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Quarter.Q4", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.AssessmentBalance", "AssessmentBalance")
                        .WithOne("Q4")
                        .HasForeignKey("CAT20.Core.Models.AssessmentTax.Quarter.Q4", "BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessmentBalance");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Street", b =>
                {
                    b.HasOne("CAT20.Core.Models.AssessmentTax.Ward", "Ward")
                        .WithMany("Streets")
                        .HasForeignKey("WardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assmt_street_assm_ward");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Allocation", b =>
                {
                    b.Navigation("AllocationLogs");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Assessment", b =>
                {
                    b.Navigation("Allocation");

                    b.Navigation("AssessmentAssetsChange");

                    b.Navigation("AssessmentAuditLogs");

                    b.Navigation("AssessmentBalance");

                    b.Navigation("AssessmentBalanceHistories");

                    b.Navigation("AssessmentDescriptionLogs");

                    b.Navigation("AssessmentDocuments");

                    b.Navigation("AssessmentJournals");

                    b.Navigation("AssessmentPropertyTypeLogs");

                    b.Navigation("AssessmentQuarterReport");

                    b.Navigation("AssessmentTempPartner");

                    b.Navigation("AssessmentTempSubPartner");

                    b.Navigation("NewAllocationRequest");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalance", b =>
                {
                    b.Navigation("Q1");

                    b.Navigation("Q2");

                    b.Navigation("Q3");

                    b.Navigation("Q4");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentBalancesHistory", b =>
                {
                    b.Navigation("QH1");

                    b.Navigation("QH2");

                    b.Navigation("QH3");

                    b.Navigation("QH4");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.AssessmentPropertyType", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Description", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Street", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.VotePaymentType", b =>
                {
                    b.Navigation("VoteAssigns");
                });

            modelBuilder.Entity("CAT20.Core.Models.AssessmentTax.Ward", b =>
                {
                    b.Navigation("Streets");
                });
#pragma warning restore 612, 618
        }
    }
}
