// <auto-generated />
using System;
using CAT20.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CAT20.Data.UserAccDb
{
    [DbContext(typeof(UserActivityDBContext))]
    [Migration("20240521031736_UserDetailsFirstMig")]
    partial class UserDetailsFirstMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_sinhala_ci")
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("CAT20.Core.Models.User.AuditLogUser", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RecordDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SourceID")
                        .HasColumnType("int");

                    b.Property<int>("Transaction")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("AuditLogUsers");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.Group", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActive");

                    b.Property<int?>("SabhaId")
                        .HasColumnType("int")
                        .HasColumnName("SabhaID");

                    b.Property<int?>("UserCreatedID")
                        .HasColumnType("int")
                        .HasColumnName("UserCreatedID");

                    b.Property<int?>("UserModifiedID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PRIMARY");

                    b.ToTable("Groups", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.GroupRule", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateModified");

                    b.Property<int>("GroupID")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("RuleID")
                        .HasColumnType("int")
                        .HasColumnName("RuleID");

                    b.Property<int?>("UserCreatedID")
                        .HasColumnType("int")
                        .HasColumnName("UserCreatedID");

                    b.Property<int?>("UserModifiedID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PRIMARY");

                    b.HasIndex("GroupID");

                    b.HasIndex("RuleID");

                    b.HasIndex("UserCreatedID");

                    b.HasIndex("UserModifiedID");

                    b.ToTable("GroupRules", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.GroupUser", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateModified");

                    b.Property<int>("GroupID")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int?>("UserCreatedID")
                        .HasColumnType("int")
                        .HasColumnName("UserCreatedID");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("UserModifiedID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PRIMARY");

                    b.HasIndex("GroupID");

                    b.HasIndex("UserCreatedID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.HasIndex("UserModifiedID");

                    b.ToTable("GroupUsers", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.Rule", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Code");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateCreated");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Module");

                    b.Property<int?>("UserCreatedID")
                        .HasColumnType("int")
                        .HasColumnName("UserCreatedID");

                    b.Property<int?>("UserModifiedID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PRIMARY");

                    b.HasIndex("UserCreatedID");

                    b.HasIndex("UserModifiedID");

                    b.ToTable("Rules", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.UserDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ud_id");

                    b.Property<int?>("ActiveStatus")
                        .HasColumnType("int")
                        .HasColumnName("ud_active_status");

                    b.Property<string>("Answer1")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_answer1");

                    b.Property<string>("Answer2")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_answer2");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ud_birthday");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ud_contact_no");

                    b.Property<int?>("GenderID")
                        .HasColumnType("int")
                        .HasColumnName("ud_gender_id")
                        .HasComment("control db fk");

                    b.Property<int>("IsAdmin")
                        .HasColumnType("int")
                        .HasColumnName("is_admin");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_nic");

                    b.Property<string>("NameInFull")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_name_in_full");

                    b.Property<string>("NameWithInitials")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_name_with_initials");

                    b.Property<int?>("OfficeID")
                        .HasColumnType("int")
                        .HasColumnName("ud_office_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_password");

                    b.Property<string>("ProfilePicPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_profile_pic_path");

                    b.Property<int?>("Q1Id")
                        .HasColumnType("int")
                        .HasColumnName("ud_q1_id");

                    b.Property<int?>("Q2Id")
                        .HasColumnType("int")
                        .HasColumnName("ud_q2_id");

                    b.Property<int?>("SabhaID")
                        .HasColumnType("int")
                        .HasColumnName("ud_sabha_id");

                    b.Property<string>("UserSignPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_user_sign_path");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ud_username");

                    b.HasKey("ID")
                        .HasName("PRIMARY");

                    b.ToTable("user_details", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.UserLoginActivity", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Browser")
                        .HasColumnType("longtext")
                        .HasColumnName("browser");

                    b.Property<string>("BrowserVersion")
                        .HasColumnType("longtext")
                        .HasColumnName("browser_version");

                    b.Property<string>("Device")
                        .HasColumnType("longtext")
                        .HasColumnName("device");

                    b.Property<string>("DeviceType")
                        .HasColumnType("longtext")
                        .HasColumnName("device_type");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("ip_address");

                    b.Property<int?>("IsSuccessLogin")
                        .HasColumnType("int")
                        .HasColumnName("is_success_login");

                    b.Property<DateTime?>("LastActiveTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("last_active_time");

                    b.Property<DateTime?>("LoginTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("login_time");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("logout_time");

                    b.Property<string>("OSVersion")
                        .HasColumnType("longtext")
                        .HasColumnName("os_version");

                    b.Property<int?>("OfficeID")
                        .HasColumnType("int")
                        .HasColumnName("office_id");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("longtext")
                        .HasColumnName("operating_system");

                    b.Property<string>("Orientation")
                        .HasColumnType("longtext")
                        .HasColumnName("orientation");

                    b.Property<string>("RuleName")
                        .HasColumnType("longtext")
                        .HasColumnName("rule_name");

                    b.Property<int?>("SabhaID")
                        .HasColumnType("int")
                        .HasColumnName("sabha_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("ID")
                        .HasName("PRIMARY");

                    b.ToTable("user_login_activity", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.UserRecoverQuestion", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int")
                        .HasColumnName("user_recover_questions_id");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_recover_questions");

                    b.HasKey("ID");

                    b.ToTable("user_recover_questions", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_sinhala_ci");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.AuditLogUser", b =>
                {
                    b.HasOne("CAT20.Core.Models.User.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.GroupRule", b =>
                {
                    b.HasOne("CAT20.Core.Models.User.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAT20.Core.Models.User.Rule", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAT20.Core.Models.User.UserDetail", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedID");

                    b.HasOne("CAT20.Core.Models.User.UserDetail", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedID");

                    b.Navigation("Group");

                    b.Navigation("Rule");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.GroupUser", b =>
                {
                    b.HasOne("CAT20.Core.Models.User.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAT20.Core.Models.User.UserDetail", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedID");

                    b.HasOne("CAT20.Core.Models.User.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CAT20.Core.Models.User.UserDetail", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedID");

                    b.Navigation("Group");

                    b.Navigation("User");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });

            modelBuilder.Entity("CAT20.Core.Models.User.Rule", b =>
                {
                    b.HasOne("CAT20.Core.Models.User.UserDetail", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedID");

                    b.HasOne("CAT20.Core.Models.User.UserDetail", "UserModified")
                        .WithMany()
                        .HasForeignKey("UserModifiedID");

                    b.Navigation("UserCreated");

                    b.Navigation("UserModified");
                });
#pragma warning restore 612, 618
        }
    }
}
